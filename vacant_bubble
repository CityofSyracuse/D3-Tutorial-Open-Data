chart = {
    // Specify the dimensions of the chart.
    const width = 928;
    const height = width;
    const margin = 1; // to avoid clipping the root circle stroke
    const Owner = d => d.Owner;
  
    // Specify the number format for values.
    const format = d3.format(",d");
  
    // Create a categorical color scale.
    const color = d3.scaleOrdinal(d3.schemeTableau10);
  
    // Create the pack layout.
    const pack = d3.pack()
        .size([width - margin * 2, height - margin * 2])
        .padding(3);
  
    // Compute the hierarchy from the (flat) data; expose the values
    // for each node; lastly apply the pack layout.
    const root = pack(d3.hierarchy({children: data})
           .sum(d => d.Property_Count));
  
    // Create the SVG container.
    const svg = d3.create("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", [-margin, -margin, width, height])
        .attr("style", "max-width: 100%; height: auto; font: 9px sans-serif;")
        .attr("text-anchor", "middle");
  
    // Place each (leaf) node according to the layoutâ€™s x and y values.
    const node = svg.append("g")
      .selectAll()
      .data(root.leaves())
      .join("g")
        .attr("transform", d => `translate(${d.x},${d.y})`);
  
            // Add a tooltip div to the body for displaying owner information
    const tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("background-color", "white")
    .style("border", "1px solid #ccc")
    .style("padding", "5px")
    .style("border-radius", "3px")
    .style("font", "12px sans-serif");
    
    // Add a filled circle.
    node.append("circle")
        .attr("fill-opacity", 0.7)
        .attr("fill", d => color(d.data))
        .attr("r", d => d.r)
        .on("mouseover", function(event, d) {
          tooltip.style("visibility", "visible")
            .html( "<b>" + "Owner: " + "</b>" + d.data.Owner  + "<br/>" + "<b>" + "Num. Properties: " + "</b>" + d.data.Property_Count);
        })
        .on("mousemove", function(event) {
          tooltip.style("top", (event.pageY - 10) + "px")
            .style("left", (event.pageX + 10) + "px");
        })
        .on("mouseout", function() {
          tooltip.style("visibility", "hidden");
        });
  
    // Add a label.
    const text = node.append("text")
        .attr("clip-path", d => `circle(${d.r})`);
  
    // Add a tspan
    text.selectAll()
        .data(d => [d.data.Owner])
        .join("tspan")
        .attr("x", 0)
        .attr("y", (d, i) => i * 12) // Adjust the y position for multiple lines
        .text(d => d);
  
    return Object.assign(svg.node(), {scales: {color}});
  }